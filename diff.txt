diff --git a/Makefile b/Makefile
index 5caa800..f8b6314 100644
--- a/Makefile
+++ b/Makefile
@@ -2,28 +2,28 @@ BIN = bin
 NAME = miniRT
 CC = cc
 CFLAG = -Wall -Werror -Wextra -g3
-SRC = src/close.c \
-	  src/color.c \
-	  src/image.c \
-	  src/init.c \
-	  src/main.c \
-	  src/matrix.c \
-	  src/matrix_transform.c \
-	  src/ray.c \
-	  src/shapes.c \
-	  src/tuples.c \
-	  src/light.c \
-	  src/world.c \
-	  src/parser.c \
-	  src/parser_utils.c \
-	  src/parser_shapes.c \
-	  src/parser_errors.c \
-	  src/parser_range.c \
-	  src/print_scene.c \
-	  src/ft_atof.c \
-	  src/debug.c \
-	  src/init_objects.c \
-	  src/intersections.c
+SRC := src/close.c \
+		src/color.c \
+		src/image.c \
+		src/init.c \
+		src/main.c \
+		src/matrix.c \
+		src/matrix_transform.c \
+		src/ray.c \
+		src/shapes.c \
+		src/tuples.c \
+		src/light.c \
+		src/world.c \
+		src/parser.c \
+		src/parser_utils.c \
+		src/parser_shapes.c \
+		src/parser_errors.c \
+		src/parser_range.c \
+		src/print_scene.c \
+		src/ft_atof.c \
+		src/intersections.c \
+		src/debug.c \
+		src/init_objects.c
 OBJ = $(patsubst src/%c,$(BIN)/%o,$(SRC))
 INCS = includes
 LIBFT_PATH = libft
diff --git a/includes/shapes.h b/includes/shapes.h
index fe2fa84..9ac0e66 100644
--- a/includes/shapes.h
+++ b/includes/shapes.h
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/04/29 22:55:50 by llai              #+#    #+#             */
-/*   Updated: 2024/05/11 16:37:31 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 15:56:52 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -34,15 +34,12 @@ typedef struct s_cylinder
 {
 	t_tuple		center;
 	t_tuple		axis;
-	float		radius;
 	float		diameter;
 	float		height;
 	t_color		color;
-	t_material	material;
+	bool		closed;
 	float		minimum;
 	float		maximum;
-	bool		closed;
-	// t_matrix	*transform;
 }	t_cylinder;
 
 typedef struct s_plane
@@ -89,18 +86,13 @@ typedef struct s_shape_intersect
 
 t_sphere			*malloc_sphere(void);
 t_shape_intersect	*hit(t_list *xs);
-t_tuple				local_normal_at(t_object *object, t_tuple local_point);
 t_tuple				normal_at(t_object *object, t_tuple world_pt);
 t_tuple				reflect(t_tuple in, t_tuple normal);
 t_list				*intersect(t_object *object, t_ray ray);
-void				intersect_caps(t_object *object, t_ray ray, t_list **intersections);
 int					calc_sphere_t(t_sphere s, t_ray ray, float *t1, float *t2);
 int					calc_cylinder_t(t_cylinder cy, t_ray ray, float *t1, float *t2);
 void				calc_sphere(t_sphere *sphere, t_data *data);
 void				calc_plane(t_plane *plane, t_data *data);
-void				init_plane_objects(t_data *data);
-void				init_sphere_objects(t_data *data);
-void				init_cylinder_objects(t_data *data);
-bool				check_cap(t_ray r, float t);
+void				calc_cylinder(t_cylinder *cylinder, t_data *data);
 
 #endif // !SHAPES_H
diff --git a/libft/ft_lstdelone.c b/libft/ft_lstdelone.c
index 1946208..eed3b2b 100644
--- a/libft/ft_lstdelone.c
+++ b/libft/ft_lstdelone.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   ft_lstdelone.c                                     :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
+/*   By: asamuilk <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/11/08 13:23:08 by llai              #+#    #+#             */
-/*   Updated: 2024/05/09 18:57:10 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/11 00:25:26 by asamuilk         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -30,5 +30,5 @@ void	ft_lstdelone(t_list *lst, void (*del)(void *))
 		del(lst -> content);
 		lst->content = NULL;
 	}
-	del(lst);
+	free(lst);
 }
diff --git a/scenes/sphere_scene.rt b/scenes/sphere_scene.rt
index 442fb1e..9b3184f 100644
--- a/scenes/sphere_scene.rt
+++ b/scenes/sphere_scene.rt
@@ -1,8 +1,12 @@
 
+
 A 									0.4 			1,1,1
 
-C 0,2,-5 		0,-0.5,1 		90
+C 0,0,-5 		0,0,1 		90
 L 5,10,-10						1 			    255,255,255
 
-cy 0,0,0	0,0,1    1 3  1,255,255
-sp 1.0,0.0,-2.0						2 			1,255,255
+sp 0.0,0.0,-1.0						2 			1,255,255
+sp -1,-0.5,-2							1 			239,255,0
+sp 0.5,-0.75,-3						0.5 			204,0,204
+pl 0.0,-1.0,30.0 			0,1,-0.1				0,0,225
+pl 0.0,0.0,30.0 			0,0,-1					255,128,0
diff --git a/scenes/sphere_scene1.rt b/scenes/sphere_scene1.rt
deleted file mode 100644
index 9b3184f..0000000
--- a/scenes/sphere_scene1.rt
+++ /dev/null
@@ -1,12 +0,0 @@
-
-
-A 									0.4 			1,1,1
-
-C 0,0,-5 		0,0,1 		90
-L 5,10,-10						1 			    255,255,255
-
-sp 0.0,0.0,-1.0						2 			1,255,255
-sp -1,-0.5,-2							1 			239,255,0
-sp 0.5,-0.75,-3						0.5 			204,0,204
-pl 0.0,-1.0,30.0 			0,1,-0.1				0,0,225
-pl 0.0,0.0,30.0 			0,0,-1					255,128,0
diff --git a/src/close.c b/src/close.c
index a3f11b3..62cf104 100644
--- a/src/close.c
+++ b/src/close.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   close.c                                            :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: asamuilk <asamuilk@student.42.fr>          +#+  +:+       +#+        */
+/*   By: asamuilk <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/04/20 14:05:03 by llai              #+#    #+#             */
-/*   Updated: 2024/05/10 20:37:15 by asamuilk         ###   ########.fr       */
+/*   Updated: 2024/05/11 00:48:01 by asamuilk         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -16,21 +16,12 @@
 #include "../includes/scene.h"
 #include "../includes/image.h"
 
-void	free_object_matrix(void *content)
-{
-	t_object	*o;
-
-	o = content;
-	if (o->transform)
-		free_matrix(&o->transform);
-}
-
 void	free_object(void *content)
 {
 	t_object	*object;
 
 	object = (t_object *)content;
-	free_object_matrix(object->transform);
+	free_matrix(&object->transform);
 	free(object->object);
 	free(object);
 }
@@ -43,15 +34,8 @@ void	free_data(t_data *data)
 	{
 		if (data->scene->world.objects)
 			ft_lstclear(&data->scene->world.objects, free_object);
-		// if (data->scene->spheres)
-		// {
-		// 	ft_lstiter(data->scene->spheres, free_object_matrix);
-		// 	ft_lstclear(&data->scene->spheres, free);
-		// }
 		if (data->scene->cylinders)
 			ft_lstclear(&data->scene->cylinders, free);
-		// if (data->scene->planes)
-		// 	ft_lstclear(&data->scene->planes, free);
 		free(data->scene);
 	}
 	free(data);
diff --git a/src/init_objects.c b/src/init_objects.c
index e850f7d..5522f46 100644
--- a/src/init_objects.c
+++ b/src/init_objects.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/08 12:22:26 by asamuilk          #+#    #+#             */
-/*   Updated: 2024/05/13 12:49:26 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 16:14:30 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -38,7 +38,7 @@ static t_matrix	*rotate_plane(t_plane *plane)
 	m->data[1][2] = axis.y * axis.z * (1 - c) - axis.x * s;
 	m->data[2][0] = axis.z * axis.x * (1 - c) - axis.y * s;
 	m->data[2][1] = axis.z * axis.y * (1 - c) + axis.x * s;
-	m->data[1][2] = c + pow(axis.y, 2) * (1 - c);
+	m->data[2][2] = c + pow(axis.y, 2) * (1 - c);
 	return (m);
 }
 
@@ -48,8 +48,6 @@ static t_matrix	*plane_transform(t_plane *plane)
 	t_matrix	*t;
 	t_matrix	*r;
 
-	// m = matrix_multiply(*init_identitymatrix(4), *translation(plane->point.x, plane->point.y, plane->point.z));
-	// m = matrix_multiply(*m, *rotate_plane(plane));
 	t = translation(plane->point.x, plane->point.y, plane->point.z);
 	r = rotate_plane(plane);
 	m = matrix_multiply(*t, *r);
@@ -60,10 +58,6 @@ static t_matrix	*plane_transform(t_plane *plane)
 
 static t_matrix	*sphere_transform(t_sphere *sphere)
 {
-	// t_matrix	*tm;
-	// t_matrix	*sm;
-	// t_matrix	*am;
-	// t_matrix	*bm;
 	t_matrix	*m;
 	t_matrix	*t;
 	t_matrix	*s;
@@ -75,31 +69,22 @@ static t_matrix	*sphere_transform(t_sphere *sphere)
 	m = matrix_multiply(*t, *s);
 	free_matrix(&t);
 	free_matrix(&s);
-	// am = init_identitymatrix(4);
-	// tm = translation(sphere->center.x, sphere->center.y, sphere->center.z);
-	// sm = scaling(radius, radius, radius);
-	// bm = matrix_multiply(*am, *tm);
-	// free_matrix(&am);
-	// free_matrix(&tm);
-	// am = matrix_multiply(*bm, *sm);
-	// free_matrix(&bm);
-	// free_matrix(&sm);
 	return (m);
 }
 
 static t_matrix	*cylinder_transform(t_cylinder *cylinder)
 {
-	t_matrix	*trans_m;
-	t_matrix	*scale_m;
 	t_matrix	*m;
+	t_matrix	*t;
+	t_matrix	*s;
 	float		radius;
 
 	radius = cylinder->diameter / 2;
-	trans_m = translation(cylinder->center.x, cylinder->center.y, cylinder->center.z);
-	scale_m = scaling(radius, radius, radius);
-	m = matrix_multiply(*scale_m, *trans_m);
-	free_matrix(&trans_m);
-	free_matrix(&scale_m);
+	t = translation(cylinder->center.x, cylinder->center.y, cylinder->center.z);
+	s = scaling(radius, radius, radius);
+	m = matrix_multiply(*t, *s);
+	free_matrix(&t);
+	free_matrix(&s);
 	return (m);
 }
 
@@ -132,94 +117,20 @@ void	calc_plane(t_plane *plane, t_data *data)
 	ft_lstadd_back(&data->scene->world.objects, ft_lstnew(object));
 }
 
-void	init_sphere_objects(t_data *data)
-{
-	t_object	*object;
-	t_sphere	*sphere;
-	t_list		*i;
-
-	i = data->scene->spheres;
-	while (i)
-	{
-		sphere = (t_sphere *)i->content;
-		object = malloc(sizeof(t_object));
-		if (!object)
-		{
-			// free_memory
-			return ;
-		}
-		object->type = SPHERE;
-		sphere->radius = 1;
-		object->transform = sphere_transform(sphere);
-		object->color = sphere->color;
-		object->material = sphere->material;
-		object->object = i->content;
-		i->content = object;
-		i = i->next;
-	}
-	ft_lstadd_back(&data->scene->world.objects, data->scene->spheres);
-	// memory needs to be freed in the end
-}
-
-void	init_plane_objects(t_data *data)
-{
-	t_object	*object;
-	t_plane		*plane;
-	t_list		*i;
-
-	i = data->scene->planes;
-	while (i)
-	{
-		plane = (t_plane *)i->content;
-		object = malloc(sizeof(t_object));
-		if (!object)
-		{
-			// free_memory
-			return ;
-		}
-		object->type = PLANE;
-		object->transform = plane_transform(plane);
-		object->color = plane->color;
-		object->material = material();
-		object->object = i->content;
-		i->content = object;
-		i = i->next;
-	}
-	ft_lstadd_back(&data->scene->world.objects, data->scene->planes);
-	// memory needs to be freed in the end
-}
-
-void	init_cylinder_objects(t_data *data)
+void	calc_cylinder(t_cylinder *cylinder, t_data *data)
 {
 	t_object	*object;
-	t_cylinder	*cylinder;
-	t_list		*i;
 
-	i = data->scene->cylinders;
-	while (i)
-	{
-		cylinder = (t_cylinder *)i->content;
-		object = malloc(sizeof(t_object));
-		if (!object)
-		{
-			// free_memory
-			return ;
-		}
-		object->type = CYLINDER;
-		cylinder->radius = 1;
-		cylinder->minimum = 0;
-		cylinder->maximum = cylinder->height;
-		cylinder->closed = false;
-		object->transform = cylinder_transform(cylinder);
-		object->transform = init_identitymatrix(4);
-		// object->transform = matrix_multiply(*object->transform, *rotation_x(M_PI / 16));
-		object->color = cylinder->color;
-		// object->material = cylinder->material;
-		object->material = material();
-		object->object = i->content;
-		i->content = object;
-		i = i->next;
-	}
-	ft_lstadd_back(&data->scene->world.objects, data->scene->cylinders);
-	// memory needs to be freed in the end
+	object = malloc(sizeof(t_object));
+	malloc_errcheck(object);
+	object->type = CYLINDER;
+	object->transform = cylinder_transform(cylinder);
+	object->transform = init_identitymatrix(4);
+	object->color = cylinder->color;
+	object->material = material();
+	cylinder->minimum = 0;
+	cylinder->maximum = cylinder->height;
+	cylinder->closed = false;
+	object->object = cylinder;
+	ft_lstadd_back(&data->scene->world.objects, ft_lstnew(object));
 }
diff --git a/src/intersections.c b/src/intersections.c
index 73a6966..d49120a 100644
--- a/src/intersections.c
+++ b/src/intersections.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/10 18:38:10 by asamuilk          #+#    #+#             */
-/*   Updated: 2024/05/13 10:44:00 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 16:20:53 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -57,21 +57,34 @@ static void	plane_intersect(
 			shape_intersection(t, object)));
 }
 
-void	intersect_caps(t_object *object, t_ray ray, t_list **intersections)
+// Check if the intersection at t is within a radius of 1 from y axis
+static bool	check_cap(t_ray *r, float t)
+{
+	float	x;
+	float	z;
+
+	x = r->origin.x + t * r->direction.x;
+	z = r->origin.z + t * r->direction.z;
+	if ((x * x + z * z) <= 1)
+		return (true);
+	return (false);
+}
+
+void	intersect_caps(t_object *object, t_ray *ray, t_list **intersections)
 {
 	t_cylinder	*cy;
 	float	t;
 
 	cy = object->object;
-	if (cy->closed == false || fabs(ray.direction.y) < EPSILON)
+	if (cy->closed == false || fabs(ray->direction.y) < EPSILON)
 		return ;
-	t = (cy->minimum - ray.origin.y) / ray.direction.y;
+	t = (cy->minimum - ray->origin.y) / ray->direction.y;
 	if (check_cap(ray, t))
 	{
 		ft_lstadd_back(intersections, ft_lstnew(
 				shape_intersection(t, object)));
 	}
-	t = (cy->maximum - ray.origin.y) / ray.direction.y;
+	t = (cy->maximum - ray->origin.y) / ray->direction.y;
 	if (check_cap(ray, t))
 	{
 		ft_lstadd_back(intersections, ft_lstnew(
@@ -91,11 +104,6 @@ static void	cylinder_intersect(
 	cylinder = (t_cylinder *)object->object;
 	if (calc_cylinder_t(*cylinder, *ray, &t1, &t2) == -1)
 		return ;
-	// if (calc_cylinder_t(*cylinder, *ray, &t1, &t2) == -2)
-	// {
-	// 	// intersect_caps(object, *ray, intersections);
-	// 	return ;
-	// }
 	if (t1 > t2)
 	{
 		tmp = t1;
@@ -114,8 +122,7 @@ static void	cylinder_intersect(
 		ft_lstadd_back(intersections, ft_lstnew(
 				shape_intersection(t2, object)));
 	}
-	intersect_caps(object, *ray, intersections);
-	// (void)intersections;
+	intersect_caps(object, ray, intersections);
 }
 
 // Create a list for the ray intersecting objects.
@@ -125,7 +132,7 @@ t_list	*intersect(t_object *object, t_ray ray)
 {
 	t_list		*intersections;
 	t_matrix	*inv_m;
-	t_ray		norm_ray;
+	t_ray		nray;
 
 	inv_m = inverse(*object->transform);
 	ray = transform(ray, *inv_m);
@@ -137,9 +144,9 @@ t_list	*intersect(t_object *object, t_ray ray)
 		plane_intersect(object, &intersections, &ray);
 	else if (object->type == CYLINDER)
 	{
-		norm_ray.origin = ray.origin;
-		norm_ray.direction = normalize(ray.direction);
-		cylinder_intersect(object, &intersections, &norm_ray);
+		nray.origin = ray.origin;
+		nray.direction = normalize(ray.direction);
+		cylinder_intersect(object, &intersections, &nray);
 	}
 	return (intersections);
 }
diff --git a/src/main.c b/src/main.c
index 2acbd2c..4264737 100644
--- a/src/main.c
+++ b/src/main.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   main.c                                             :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
+/*   By: asamuilk <asamuilk@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/04/20 13:43:24 by llai              #+#    #+#             */
-/*   Updated: 2024/05/11 16:40:18 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/10 19:26:47 by asamuilk         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,9 +14,6 @@
 #include "../includes/world.h"
 #include "../includes/scene.h"
 #include "../includes/image.h"
-#include "../includes/ray.h"
-#include "../includes/shapes.h"
-#include "../includes/matrix.h"
 
 void	sphere_scene(t_data *data)
 {
@@ -24,94 +21,6 @@ void	sphere_scene(t_data *data)
 	printf("\ndone\n");
 }
 
-// static t_shape_intersect	*shape_intersection(float t, t_object *object)
-// {
-// 	t_shape_intersect	*i;
-//
-// 	i = malloc(sizeof(t_shape_intersect));
-// 	i->t = t;
-// 	i->object = object;
-// 	return (i);
-// }
-
-void	cylinder_intersect(
-	t_object *object, t_list **intersections, t_ray *ray)
-{
-	t_cylinder	*cylinder;
-	float		t1;
-	float		t2;
-	float		tmp;
-	float		y;
-
-	cylinder = (t_cylinder *)object->object;
-	if (calc_cylinder_t(*cylinder, *ray, &t1, &t2) == -1)
-		return ;
-	if (t1 > t2)
-	{
-		tmp = t1;
-		t1 = t2;
-		t2 = tmp;
-	}
-	y = ray->origin.y + t1 * ray->direction.y;
-	if (cylinder->minimum < y && y < cylinder->maximum)
-	{
-		printf("1\n");
-		// ft_lstadd_back(intersections, ft_lstnew(
-		// 		shape_intersection(t1, object)));
-	}
-	y = ray->origin.y + t2 * ray->direction.y;
-	if (cylinder->minimum < y && y < cylinder->maximum)
-	{
-		printf("2\n");
-		// ft_lstadd_back(intersections, ft_lstnew(
-		// 		shape_intersection(t2, object)));
-	}
-	// printf("%f %f\n", t1, t2);
-	// ft_lstadd_back(intersections, ft_lstnew(
-	// 		shape_intersection(t1, object)));
-	// ft_lstadd_back(intersections, ft_lstnew(
-	// 		shape_intersection(t2, object)));
-	(void)intersections;
-}
-
-t_matrix	*cylinder_transform(t_cylinder *cylinder)
-{
-	t_matrix	*trans_m;
-	t_matrix	*scale_m;
-	t_matrix	*m;
-	float		radius;
-
-	radius = cylinder->diameter / 2;
-	trans_m = translation(cylinder->center.x, cylinder->center.y, cylinder->center.z);
-	scale_m = scaling(radius, radius, radius);
-	m = matrix_multiply(*scale_m, *trans_m);
-	free_matrix(&trans_m);
-	free_matrix(&scale_m);
-	return (m);
-}
-
-t_object	*init_cylinderob(void)
-{
-	t_object	*ob;
-	t_cylinder	*cylinder;
-
-	cylinder = malloc(sizeof(t_cylinder));
-	cylinder->radius = 1;
-	cylinder->color = color(0, 255, 0, 0);
-	cylinder->material = material();
-	cylinder->minimum = 1;
-	cylinder->maximum = 2;
-	ob = malloc(sizeof(t_object));
-	ob->object = cylinder;
-	ob->transform = cylinder_transform(cylinder);
-	ob->color = cylinder->color;
-	ob->material = cylinder->material;
-	ob->type = CYLINDER;
-	return (ob);
-}
-
-
-
 int	main(int ac, char **av)
 {
 	t_data	*data;
@@ -124,13 +33,8 @@ int	main(int ac, char **av)
 		init_world(data);
 		// print_scene(data);
 		init_mlx(data);
-		// t_ray	r = ray(point(0, 1.5, -5), normalize(vector(0.1, 1, 0)));
-		// t_object	*ob = init_cylinderob();
-		// cylinder_intersect(ob, NULL, &r);
 		printf("render\n");
 		sphere_scene(data);
-		
-		// print_tuple2(local_normal_at(ob, point(-1, -1, 0)));
 		mlx_loop(data->base_image->mlx);
 	}
 }
diff --git a/src/parser_shapes.c b/src/parser_shapes.c
index 90f07b9..b3b5bc3 100644
--- a/src/parser_shapes.c
+++ b/src/parser_shapes.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/01 19:51:05 by asamuilk          #+#    #+#             */
-/*   Updated: 2024/05/11 16:01:44 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 16:10:54 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -17,16 +17,16 @@
 #include "../includes/shapes.h"
 #include "../includes/matrix.h"
 
-static int	add_node(void *content, t_list **lst)
-{
-	t_list	*node;
-
-	node = ft_lstnew(content);
-	if (!node)
-		return (FAIL);
-	ft_lstadd_back(lst, node);
-	return (SUCCESS);
-}
+// static int	add_node(void *content, t_list **lst)
+// {
+// 	t_list	*node;
+//
+// 	node = ft_lstnew(content);
+// 	if (!node)
+// 		return (FAIL);
+// 	ft_lstadd_back(lst, node);
+// 	return (SUCCESS);
+// }
 
 int	parse_sphere(char *line, t_data *data)
 {
@@ -124,7 +124,8 @@ int	parse_cylinder(char *line, t_data *data)
 		return (FAIL);
 	if (line[i])
 		return (free_shape_fail(CY, NULL, EXTRA_ERR, cylinder));
-	if (add_node(cylinder, &data->scene->cylinders) == FAIL)
-		return (free_shape_fail(CY, NULL, strerror(errno), cylinder));
+	calc_cylinder(cylinder, data);
+	// if (add_node(cylinder, &data->scene->cylinders) == FAIL)
+	// 	return (free_shape_fail(CY, NULL, strerror(errno), cylinder));
 	return (SUCCESS);
 }
diff --git a/src/ray.c b/src/ray.c
index 2416154..38f0a91 100644
--- a/src/ray.c
+++ b/src/ray.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/04/29 22:32:54 by llai              #+#    #+#             */
-/*   Updated: 2024/05/11 15:19:29 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/08 22:01:39 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -18,7 +18,6 @@ t_ray	ray(t_tuple origin, t_tuple direction)
 	t_ray	r;
 
 	r.origin = origin;
-	// do direction need to be normalize?
 	r.direction = direction;
 	return (r);
 }
diff --git a/src/shapes.c b/src/shapes.c
index 6b05f9f..3c67321 100644
--- a/src/shapes.c
+++ b/src/shapes.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/04/29 22:57:41 by llai              #+#    #+#             */
-/*   Updated: 2024/05/13 10:43:52 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 16:21:21 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -15,7 +15,6 @@
 #include "../includes/debug.h"
 #include "../includes/ray.h"
 #include "../includes/matrix.h"
-#include <math.h>
 
 t_sphere	*malloc_sphere(void)
 {
@@ -51,19 +50,6 @@ int	calc_sphere_t(t_sphere s, t_ray ray, float *t1, float *t2)
 	return (0);
 }
 
-// Check if the intersection at t is within a radius of 1 from y axis
-bool	check_cap(t_ray r, float t)
-{
-	float	x;
-	float	z;
-
-	x = r.origin.x + t * r.direction.x;
-	z = r.origin.z + t * r.direction.z;
-	if ((x * x + z * z) <= 1)
-		return (true);
-	return (false);
-}
-
 int	calc_cylinder_t(t_cylinder cy, t_ray ray, float *t1, float *t2)
 {
 	float	a;
@@ -112,15 +98,13 @@ t_shape_intersect	*hit(t_list *xs)
 
 t_tuple	local_normal_at(t_object *object, t_tuple local_point)
 {
-	t_tuple	normal;
-
 	if (object->type == SPHERE)
-		normal = sub_tuples(local_point, point(0, 0, 0));
+		return (normalize(
+				sub_tuples(local_point, point(0, 0, 0))));
 	else if (object->type == PLANE)
-		normal = (t_tuple){0, 1, 0, VECTOR};
-	else if (object->type == CYLINDER)
-		normal = (t_tuple){local_point.x, 0, local_point.z, VECTOR};
-	return (normalize(normal));
+		return ((t_tuple){0, 1, 0, VECTOR});
+	else
+		return ((t_tuple){0, 0, 0, VECTOR});
 }
 
 // For a sphere, an arrow from origin to the point is perpendicular 
@@ -156,4 +140,3 @@ t_tuple	reflect(t_tuple in, t_tuple normal)
 				in_dot_norm, scalar_mul_tuple(2, normal))));
 }
 
-
diff --git a/src/world.c b/src/world.c
index 79cc039..2647808 100644
--- a/src/world.c
+++ b/src/world.c
@@ -6,7 +6,7 @@
 /*   By: llai <llai@student.42london.com>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/01 17:10:46 by llai              #+#    #+#             */
-/*   Updated: 2024/05/10 21:25:08 by llai             ###   ########.fr       */
+/*   Updated: 2024/05/13 15:59:55 by llai             ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -18,7 +18,6 @@
 #include "../includes/world.h"
 #include "../includes/scene.h"
 #include "../includes/image.h"
-#include "../includes/shapes.h"
 #include <stdbool.h>
 
 void	insert_sorted(t_list **sorted, t_list *node)
@@ -235,10 +234,14 @@ t_color	color_at(t_world world, t_ray ray)
 	intersections = intersect_world(world, ray);
 	i = hit(intersections);
 	if (i == NULL)
+	{
+		ft_lstclear(&intersections, free);
 		return (color(0, 0, 0, 0));
+	}
 	comps = prepare_comps(i, &ray);
 	shadowed = is_shadowed(world, comps.over_point);
 	c = lighting(&world, &comps, shadowed);
+	ft_lstclear(&intersections, free);
 	return (c);
 }
 
@@ -275,7 +278,4 @@ void	init_world(t_data *data)
 	data->scene->world.ambient = data->scene->ambient;
 	data->scene->world.light = data->scene->light;
 	configure_camera(data, &data->scene->camera);
-	init_plane_objects(data);
-	init_sphere_objects(data);
-	init_cylinder_objects(data);
 }
